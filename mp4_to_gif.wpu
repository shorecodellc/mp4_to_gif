#!wing
#!version=8.0
##################################################################
# Wing project file : User-specific branch                       #
##################################################################
[user attributes]
debug.show-args-dialog = {loc('src/mtg_main.py'): False}
gui.perspective-current = 'UltimateGIT'
gui.perspectives = (1,
                    {'user': ({},
                              {'windows': [{'name': 'I6l5El55TJeMhFWhXplgHMMhZVOfFsKo',
        'size-state': '',
        'type': 'dock',
        'view': {'area': 'tall',
                 'constraint': 'perspective_tools_only',
                 'current_pages': [0,
                                   0],
                 'full-screen': False,
                 'notebook_display': 'normal',
                 'notebook_percent': 0.33775889537971326,
                 'override_title': None,
                 'pagelist': [('python-shell',
                               'tall',
                               0,
                               {'active-range': (None,
        -1,
        -1),
                                'launch-id': None}),
                              ('testing',
                               'tall',
                               0,
                               {'added-files': [loc('../../Coding/BBOT/tests/test_filepaths_template.py'),
        loc('../../Coding/BBOT/tests/test_release.py'),
        loc('../../Coding/BBOT/tests/test_debug_output.py'),
        loc('../../Coding/BBOT/tests/test_log_template.py')],
                                'filter': '',
                                'recent-filters': None,
                                'sort-order': 'alpha',
                                'tree-state': {'expanded-nodes': [],
        'selected-nodes': [(3,)],
        'top-node': (0,)}}),
                              ('browser',
                               'tall',
                               0,
                               {'all_tree_states': {},
                                'browse_mode': 'Current Module',
                                'follow-selection': False,
                                'sort_mode': 'Alphabetically',
                                'visibility_options': {'Derived Classes': False,
        'Imported': False,
        'Modules': True}}),
                              ('snippets',
                               'tall',
                               0,
                               {'tree-states': {'__all__': [],
        'c': [],
        'django': [],
        'html': [],
        'py': []}}),
                              ('debug-io',
                               'tall',
                               1,
                               {}),
                              ('debug-stack',
                               'tall',
                               1,
                               {'codeline-mode': 'below'}),
                              ('messages',
                               'tall',
                               1,
                               {'current-domain': 0})],
                 'primary_view_state': {'area': 'wide',
        'constraint': 'perspective_tools_only',
        'current_pages': [2,
                          1],
        'notebook_display': 'normal',
        'notebook_percent': 0.2998236331569665,
        'override_title': None,
        'pagelist': [('source-assistant',
                      'wide',
                      0,
                      {}),
                     ('batch-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'current-file'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 42,
                                       'fReplaceText': '',
                                       'fReverse': False,
                                       'fSearchText': 'self.logg',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': True},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('interactive-search',
                      'wide',
                      0,
                      {}),
                     ('debug-data',
                      'wide',
                      0,
                      {}),
                     ('debug-breakpoints',
                      'wide',
                      0,
                      {'tree-state': []}),
                     ('ai',
                      'wide',
                      0,
                      {'auto-context': 0,
                       'chat-auto-context': 0,
                       'chat-enter-executes': 1,
                       'chat-target': 'selection',
                       'current-page': 0,
                       'enter-executes': False,
                       'replace-mode': 'replace',
                       'request': '',
                       'show-console': False,
                       'target': 'selection'}),
                     ('debug-probe',
                      'wide',
                      1,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'code-line': '',
                       'first-line': 0,
                       'folded-linenos': [],
                       'history': {},
                       'launch-id': None,
                       'sel-line': 0,
                       'sel-line-start': 0,
                       'selection_end': 0,
                       'selection_start': 0,
                       'zoom': 0}),
                     ('debug-exceptions',
                      'wide',
                      1,
                      {}),
                     ('os-command',
                      'wide',
                      1,
                      {}),
                     ('project',
                      'wide',
                      1,
                      {}),
                     ('indent',
                      'wide',
                      1,
                      {}),
                     ('bookmarks',
                      'wide',
                      1,
                      {'filter-text': ''}),
                     ('debug-watch',
                      'wide',
                      1,
                      {'node-states': [],
                       'tree-state': {'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': (0,)}}),
                     ('debug-modules',
                      'wide',
                      1,
                      {})],
        'primary_view_state': {'editor_states': ({'locked': False},
        [loc('src/mtg_filepaths.py'),
         loc('src/mtg_main.py')])},
        'saved_notebook_display': None,
        'split_percents': {0: 0.4410585404971933,
                           1: 0.5,
                           2: 0.5},
        'splits': 2,
        'tab_location': 'top',
        'traversal_pos': ((1,
                           1),
                          1743823530.4560213)},
                 'saved_notebook_display': None,
                 'split_percents': {0: 0.5008818342151675},
                 'splits': 2,
                 'tab_location': 'left',
                 'traversal_pos': ((1,
                                    0),
                                   1743823680.4029303)},
        'window-alloc': (0,
                         0,
                         1920,
                         812)}]})})
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': 'I6l5El55TJeMhFWhXplgHMMhZVOfFsKo',
        'size-state': '',
        'type': 'dock',
        'view': {'area': 'tall',
                 'constraint': None,
                 'current_pages': [0,
                                   0],
                 'full-screen': False,
                 'notebook_display': 'normal',
                 'notebook_percent': 0.33775889537971326,
                 'override_title': None,
                 'pagelist': [('python-shell',
                               'tall',
                               0,
                               {'active-range': (None,
        -1,
        -1),
                                'attrib-starts': [],
                                'code-line': "[{'img': 'images/pptx_demos/Triangular.gif', 'name': 'Triangular'},\n",
                                'first-line': 1252,
                                'folded-linenos': [],
                                'history': {None: ['from bandit.core.manager import BanditManager\nfrom bandit.core.config import BanditConfig\n\n',
        'python_files = [f for f in files if f.endswith(\'.py\')]\nif not python_files:\n    print("No Python files to scan.")\n    return files\n# Create a Bandit manager\nb_conf = BanditConfig()\nb_mgr = BanditManager(b_conf, \'file\', \'txt\')\n# Run Bandit on each Python file\nb_mgr.discover_files(python_files)\nb_mgr.run_tests()\n\n',
        'b_mgr.baseline\n',
        'b_mgr.agg_type\n',
        'b_mgr.b_conf\n',
        'b_mgr.get_issue_list()\n',
        'b_mgr.output_results(lines, sev_level, conf_level, output_file, output_format)\n',
        'b_mgr.verbose\n',
        'b_mgr.verbose = True\n',
        'b_mgr.run_tests()\n',
        "files = ['/home/kevin/sc/exact_dj/src/util/edj_sql_util.py']\n",
        'b_mgr.files_list\n',
        'b_mgr.results\n',
        'b_mgr.metrics\n',
        'b_mgr.metrics.current\n',
        'b_mgr.metrics.count_issues(scores)\n',
        'b_mgr.quiet\n',
        'print(b_mgr.run_tests())\n',
        'b_mgr.output_results(, "Low", "Low", \'test.txt\', \'text\')\n',
        'help(b_mgr.output_results)\n',
        'b_mgr.output_results(0, "Low", "Low", \'test.txt\', \'text\')\n',
        'b_mgr.output_results(0, "Low", "Low", \'test.txt\')\n',
        'b_mgr.output_results(0, "Low", "Low", \'test.txt\', \'html\')\n',
        'from bandit import formatters\n',
        'b_mgr.output_results(0, "Low", "Low", \'test.txt\', formatters.text)\n',
        "report_file = 'test.txt'\nwith open(report_file, 'w') as report_fp:\n    text_formatter.report(b_mgr, report_fp, sev_level='Low', conf_level='Low')\n\n",
        "files = ['/home/kevin/Coding/BBOT/filepaths_template.py', '/home/kevin/Coding/BBOT/debug_output.py']\n",
        "files = ['/home/kevin/Coding/BBOT/filepaths_template.py']\n",
        "files = ['/home/kevin/Coding/BBOT/debug_output.py']\n",
        "python_files = [f for f in files if f.endswith('.py')]\n# Create a Bandit manager\nb_conf = BanditConfig()\nb_mgr = BanditManager(b_conf, 'file', 'txt')\n# Run Bandit on each Python file\nb_mgr.discover_files(python_files)\nb_mgr.run_tests()\n\n",
        "report_file = 'test.txt'\nwith open(report_file, 'w') as report_fp:\n    formatters.text.report(b_mgr, report_fp, sev_level='Low', conf_level='Low')\n\n",
        "report_file = 'test.txt'\nwith open(report_file, 'w') as report_fp:\n    formatters.html.report(b_mgr, report_fp, sev_level='Low', conf_level='Low')\n\n",
        "report_file = 'test.txt'\nwith open(report_file, 'w') as report_fp:\n    formatters.text.get_verbose_details(b_mgr, report_fp, sev_level='Low', conf_level='Low')\n\n",
        'formatters.text.get_verbose_details(b_mgr)\n',
        'formatters.text.get_metrics(b_mgr)\n',
        'import zipfile\n',
        "zipfile.ZipInfo('/home/kevin')\n",
        "zipfile.ZipInfo('/home/kevin/')\n",
        "test = zipfile.ZipInfo('/home/kevin')\n",
        "test.writestr(test, '')\n",
        "test = zipfile.ZipInfo('/home/kevin/')\n",
        "with zipfile.ZipFile('test.zip', 'w') as f:\n    f.writestr(test, '')\n\n",
        'test[:] = [1, 2, 3]\n',
        'test2[:] = [1, 2, 3]\n',
        'test2 = [1, 2, 3]\n',
        'test2[:] = test2\n',
        'test2\n',
        'import fnmatch\n',
        "fnmatch.fnmatch('home/kevin', 'home')\n",
        "fnmatch.fnmatch('home/kevin', 'kevin')\n",
        "fnmatch.fnmatch('home/kevin.tx', 'kevin')\n",
        "fnmatch.fnmatch('home/kevin.txt', 'kevin')\n",
        "fnmatch.fnmatch('home/kevin.txt', 'txt')\n",
        "fnmatch.fnmatch('home/kevin.txt', 'kevin.txt')\n",
        "fnmatch.fnmatch('home/kevin.txt', '*.txt')\n",
        "fnmatch.fnmatch('home/kevin', '*kevin')\n",
        "fnmatch.fnmatch('home/kevin/', '*kevin')\n",
        "os.path.join('/home', 'kevin')\n",
        "os.path.join('/home', 'kevin/')\n",
        'from moviepy.video.VideoClip import VideoClip\n',
        'from  moviepy.Clip import Clip\n',
        'help(Clip)\n',
        'help(VideoClip)\n',
        '    input_mp4 = "../Global Technology Blue Loop.mp4"  # Path to your MP4 file\n',
        '    input_mp4 = "Global Technology Blue Loop.mp4"  # Path to your MP4 file\n',
        "with open(input_path, 'rb') as f:\n    video_bytes = f.read()\n\n",
        'os.cwd()\n',
        'os.pwd()\n',
        'os.curdir()\n',
        'os.curdir\n',
        'os.getcwd()\n',
        "os.chdir('sc/mp4_to_gif')\n",
        "with open(input_mp4, 'rb') as f:\n    video_bytes = f.read()\n\n",
        'type(video_bytes)\n',
        "with open(input_mp4, 'rb') as f:\n    type(f)\n\n",
        "with open(input_mp4, 'rb') as f:\n    print(type(f))\n\n",
        'from moviepy import VideoFileClip, TextClip, CompositeVideoClip\n',
        'import os\n',
        'os.path.isfile\n',
        'help(os.path.isfile)\n',
        "os.path.basename('/test/test/test.t')\n",
        "os.path.dirname('/test/test/test.t')\n",
        'os.path.realpath(filename)\n',
        "os.path.realpath('./src/mtg_main.py')\n",
        'from moviepy import VideoFileClip\n',
        'help(VideoFileClip.write_gif)\n',
        'help(VideoFileClip)\n',
        'help(VideoFileClip.resized)\n',
        'from moviepy import  vfx.Resize\n',
        'from moviepy.video.fx import Resize\n',
        'help(Resize)\n',
        "os.listdir('./src/data')\n",
        "os.listdir('./src/data/output')\n",
        "[{'name': 'place', 'img': os.path.join(f'images/pptx_demos/{fn}'),} for fn in dirs]\n",
        "dir_dict=[{'name': 'place', 'img': os.path.join(f'images/pptx_demos/{fn}'),} for fn in dirs]\n",
        "dirs = os.listdir('./src/data/output')\n",
        "dir_dict=[{'name': os.path.splitext(fn)[0], 'img': os.path.join(f'images/pptx_demos/{fn}'),} for fn in dirs]\n",
        'dir_dict\n',
        'from pprint import pprint as pp\n',
        'pp(dir_dict)\n']},
                                'launch-id': None,
                                'sel-line': 1257,
                                'sel-line-start': 49613,
                                'selection_end': 50299,
                                'selection_start': 49613,
                                'zoom': 0}),
                              ('testing',
                               'tall',
                               0,
                               {'added-files': [],
                                'filter': '',
                                'recent-filters': None,
                                'sort-order': 'alpha',
                                'tree-state': {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': (0,)}}),
                              ('browser',
                               'tall',
                               0,
                               {'all_tree_states': {},
                                'browse_mode': 'Current Module',
                                'follow-selection': False,
                                'sort_mode': 'Alphabetically',
                                'visibility_options': {'Derived Classes': False,
        'Imported': False,
        'Modules': True}}),
                              ('snippets',
                               'tall',
                               0,
                               {'tree-states': {'__all__': [],
        'c': [],
        'django': [],
        'html': [],
        'py': []}}),
                              ('debug-io',
                               'tall',
                               1,
                               {}),
                              ('debug-stack',
                               'tall',
                               1,
                               {'codeline-mode': 'below'}),
                              ('messages',
                               'tall',
                               1,
                               {'current-domain': 0})],
                 'primary_view_state': {'area': 'wide',
        'constraint': None,
        'current_pages': [6,
                          1],
        'notebook_display': 'normal',
        'notebook_percent': 0.30000000000000004,
        'override_title': None,
        'pagelist': [('source-assistant',
                      'wide',
                      0,
                      {}),
                     ('batch-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'current-file'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 42,
                                       'fReplaceText': '',
                                       'fReverse': False,
                                       'fSearchText': 'self.logg',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': True},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('interactive-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 42,
                                       'fReplaceText': 'Distro',
                                       'fReverse': False,
                                       'fSearchText': 'AssertionError',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False}}),
                     ('debug-data',
                      'wide',
                      0,
                      {}),
                     ('debug-breakpoints',
                      'wide',
                      0,
                      {'tree-state': []}),
                     ('ai',
                      'wide',
                      0,
                      {}),
                     ('versioncontrol.git',
                      'wide',
                      0,
                      {}),
                     ('debug-probe',
                      'wide',
                      1,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'code-line': '',
                       'first-line': 0,
                       'folded-linenos': [],
                       'history': {},
                       'launch-id': None,
                       'sel-line': 0,
                       'sel-line-start': 0,
                       'selection_end': 0,
                       'selection_start': 0,
                       'zoom': 0}),
                     ('debug-exceptions',
                      'wide',
                      1,
                      {}),
                     ('os-command',
                      'wide',
                      1,
                      {'last-percent': 0.8,
                       'toolbox-percent': 1.0,
                       'toolbox-tree-sel': 'cmd-u5A6MoYnJS011TbN'}),
                     ('project',
                      'wide',
                      1,
                      {'tree-state': {'file-sort-method': 'by name',
                                      'list-files-first': False,
                                      'tree-states': {'deep': {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': (0,)}},
                                      'tree-style': 'deep'}}),
                     ('indent',
                      'wide',
                      1,
                      {}),
                     ('bookmarks',
                      'wide',
                      1,
                      {'filter-text': ''}),
                     ('debug-watch',
                      'wide',
                      1,
                      {'node-states': [],
                       'tree-state': {'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': (0,)}}),
                     ('debug-modules',
                      'wide',
                      1,
                      {})],
        'primary_view_state': {'editor_states': ({'bookmarks': ([[loc('src/filepaths_template.py'),
        {'attrib-starts': [('Files|0|',
                            10),
                           ('Files|0|.__post_init__|0|',
                            15)],
         'code-line': '        self.current_platform = platform.system()\n',
         'first-line': 0,
         'folded-linenos': [],
         'sel-line': 16,
         'sel-line-start': 360,
         'selection_end': 409,
         'selection_start': 409,
         'zoom': 0},
        1743822460.395244],
        [loc('src/mtg_main.py'),
         {'attrib-starts': [('convert_mp4_to_gif|0|',
                             8)],
          'code-line': '        #clip = clip.resize(resize_factor)\n',
          'first-line': 3,
          'folded-linenos': [],
          'sel-line': 18,
          'sel-line-start': 501,
          'selection_end': 543,
          'selection_start': 543,
          'zoom': 0},
         1743822468.3495584],
        [loc('src/mtg_filepaths.py'),
         {'attrib-starts': [('Files|0|',
                             10)],
          'code-line': "    filepaths: list = field(default_factory=lambda: ['logging/mtg.log', 'data', 'data/output'])\n",
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 12,
          'sel-line-start': 210,
          'selection_end': 303,
          'selection_start': 303,
          'zoom': 0},
         1743822484.3134913],
        [loc('src/mtg_main.py'),
         {'attrib-starts': [],
          'code-line': '\n',
          'first-line': 3,
          'folded-linenos': [],
          'sel-line': 10,
          'sel-line-start': 163,
          'selection_end': 163,
          'selection_start': 163,
          'zoom': 0},
         1743822515.6866353],
        [loc('src/mtg_filepaths.py'),
         {'attrib-starts': [('Files|0|',
                             10)],
          'code-line': '    def get_files_list(self) -> list:\n',
          'first-line': 18,
          'folded-linenos': [],
          'sel-line': 27,
          'sel-line-start': 865,
          'selection_end': 887,
          'selection_start': 873,
          'zoom': 0},
         1743822520.909449],
        [loc('src/mtg_main.py'),
         {'attrib-starts': [],
          'code-line': 'def convert_mp4_to_gif(input_fps, output_gifs_fps, start_time=None, end_time=None, resize_factor=1.0):\n',
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 12,
          'sel-line-start': 192,
          'selection_end': 240,
          'selection_start': 240,
          'zoom': 0},
         1743822654.4704583],
        [loc('src/mtg_main.py'),
         {'attrib-starts': [('get_input_filenames|0|',
                             10)],
          'code-line': '        return [], []\n',
          'first-line': 8,
          'folded-linenos': [],
          'sel-line': 29,
          'sel-line-start': 904,
          'selection_end': 925,
          'selection_start': 925,
          'zoom': 0},
         1743822799.3136759],
        [loc('src/mtg_main.py'),
         {'attrib-starts': [('get_input_filenames|0|',
                             10)],
          'code-line': '        return input_fps, output_fps\n',
          'first-line': 10,
          'folded-linenos': [],
          'sel-line': 27,
          'sel-line-start': 802,
          'selection_end': 838,
          'selection_start': 838,
          'zoom': 0},
         1743823254.9766803],
        [loc('../../envs/mp4_to_gif/lib/python3.12/site-packages/moviepy/video/io/ffmpeg_reader.py'),
         {'attrib-starts': [('FFMPEG_VideoReader|0|',
                             17),
                            ('FFMPEG_VideoReader|0|.read_frame|0|',
                             165)],
          'code-line': '                raise IOError(\n',
          'first-line': 188,
          'folded-linenos': [],
          'sel-line': 195,
          'sel-line-start': 6231,
          'selection_end': 6231,
          'selection_start': 6231,
          'zoom': 0},
         1743823271.558672],
        [loc('src/mtg_filepaths.py'),
         {'attrib-starts': [('Files|0|',
                             10)],
          'code-line': '    def get_files_list(self) -> list:\n',
          'first-line': 18,
          'folded-linenos': [],
          'sel-line': 27,
          'sel-line-start': 865,
          'selection_end': 887,
          'selection_start': 873,
          'zoom': 0},
         1743823272.804778],
        [loc('src/mtg_main.py'),
         {'attrib-starts': [('convert_mp4_to_gif|0|',
                             34)],
          'code-line': '        # Write the GIF file\n',
          'first-line': 15,
          'folded-linenos': [],
          'sel-line': 47,
          'sel-line-start': 1541,
          'selection_end': 1569,
          'selection_start': 1569,
          'zoom': 0},
         1743823351.9191773],
        [loc('src/mtg_filepaths.py'),
         {'attrib-starts': [('Files|0|',
                             10)],
          'code-line': '    def get_files_list(self) -> list:\n',
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 27,
          'sel-line-start': 865,
          'selection_end': 887,
          'selection_start': 873,
          'zoom': 0},
         1743823357.790041],
        [loc('src/mtg_main.py'),
         {'attrib-starts': [('convert_mp4_to_gif|0|',
                             34)],
          'code-line': '            #clip = clip.subclip(start_time, end_time)\n',
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 42,
          'sel-line-start': 1386,
          'selection_end': 1433,
          'selection_start': 1433,
          'zoom': 0},
         1743823432.7418692],
        [loc('src/mtg_main.py'),
         {'attrib-starts': [],
          'code-line': '    print(input_files)\n',
          'first-line': 39,
          'folded-linenos': [],
          'sel-line': 58,
          'sel-line-start': 1923,
          'selection_end': 1944,
          'selection_start': 1944,
          'zoom': 0},
         1743823466.3826306],
        [loc('src/mtg_main.py'),
         {'attrib-starts': [],
          'code-line': '    filepaths = files.get_files_list()\n',
          'first-line': 39,
          'folded-linenos': [],
          'sel-line': 54,
          'sel-line-start': 1747,
          'selection_end': 1769,
          'selection_start': 1769,
          'zoom': 0},
         1743823513.7710881],
        [loc('src/mtg_main.py'),
         {'attrib-starts': [('get_input_filenames|0|',
                             10)],
          'code-line': '        input_fps = [os.path.abspath(f) for f in filenames if os.path.isfile(os.path.abspath(os.path.join(input_dir, f)))]\n',
          'first-line': 9,
          'folded-linenos': [],
          'sel-line': 24,
          'sel-line-start': 571,
          'selection_end': 692,
          'selection_start': 692,
          'zoom': 0},
         1743823527.2642984],
        [loc('src/mtg_main.py'),
         {'attrib-starts': [],
          'code-line': '    convert_mp4_to_gif(input_files, output_gifs_fps)',
          'first-line': 14,
          'folded-linenos': [],
          'sel-line': 58,
          'sel-line-start': 1948,
          'selection_end': 2000,
          'selection_start': 2000,
          'zoom': 0},
         1743823530.4919124],
        [loc('../../envs/mp4_to_gif/lib/python3.12/site-packages/moviepy/video/io/ffmpeg_reader.py'),
         {'attrib-starts': [('FFMPEG_VideoReader|0|',
                             17),
                            ('FFMPEG_VideoReader|0|.read_frame|0|',
                             165)],
          'code-line': '                raise IOError(\n',
          'first-line': 155,
          'folded-linenos': [],
          'sel-line': 195,
          'sel-line-start': 6231,
          'selection_end': 6231,
          'selection_start': 6231,
          'zoom': 0},
         1743823535.2956433],
        [loc('src/mtg_main.py'),
         {'attrib-starts': [('convert_mp4_to_gif|0|',
                             35)],
          'code-line': '            clip.write_gif(output_gifs_fps[i], fps=10)  # You can adjust the fps for smoother GIFs\n',
          'first-line': 45,
          'folded-linenos': [],
          'sel-line': 52,
          'sel-line-start': 1788,
          'selection_end': 1814,
          'selection_start': 1805,
          'zoom': 0},
         1743824186.261972],
        [loc('src/mtg_main.py'),
         {'attrib-starts': [],
          'code-line': 'from moviepy import VideoFileClip\n',
          'first-line': 6,
          'folded-linenos': [],
          'sel-line': 8,
          'sel-line-start': 122,
          'selection_end': 155,
          'selection_start': 122,
          'zoom': 0},
         1743824196.2138178]],
        20),
        'current-loc': loc('src/mtg_main.py'),
        'editor-state-list': [(loc('src/mtg_filepaths.py'),
                               {'attrib-starts': [('Files|0|',
        10)],
                                'code-line': '    def get_files_list(self) -> list:\n',
                                'first-line': 0,
                                'folded-linenos': [],
                                'sel-line': 27,
                                'sel-line-start': 865,
                                'selection_end': 887,
                                'selection_start': 873,
                                'zoom': 0}),
                              (loc('src/mtg_main.py'),
                               {'attrib-starts': [],
                                'code-line': '    convert_mp4_to_gif(input_files, output_gifs_fps, resize_factor=0.05)',
                                'first-line': 36,
                                'folded-linenos': [],
                                'sel-line': 63,
                                'sel-line-start': 2212,
                                'selection_end': 2278,
                                'selection_start': 2278,
                                'zoom': 0})],
        'has-focus': False,
        'locked': False},
        [loc('src/mtg_filepaths.py'),
         loc('src/mtg_main.py')]),
                               'open_files': ['src/mtg_filepaths.py',
        'src/mtg_main.py']},
        'saved_notebook_display': None,
        'split_percents': {0: 0.4410585404971933,
                           1: 0.5,
                           2: 0.5},
        'splits': 2,
        'tab_location': 'top',
        'traversal_pos': ((1,
                           1),
                          1743824427.3577523),
        'user_data': {}},
                 'saved_notebook_display': None,
                 'split_percents': {0: 0.5},
                 'splits': 2,
                 'tab_location': 'left',
                 'traversal_pos': ((1,
                                    0),
                                   1743824441.5748112),
                 'user_data': {}},
        'window-alloc': (0,
                         0,
                         1920,
                         812)}]}
guimgr.recent-documents = [loc('src/mtg_main.py'),
                           loc('src/mtg_filepaths.py')]
guimgr.visual-state = {loc('../../envs/mp4_to_gif/lib/python3.12/site-packages/moviepy/Clip.py'): {'attrib-starts': [('Clip|0|',
        27),
        ('Clip|0|.get_frame|0|',
         66)],
        'code-line': '            return self.frame_function(t)\n',
        'first-line': 64,
        'folded-linenos': [],
        'sel-line': 86,
        'sel-line-start': 2325,
        'selection_end': 2325,
        'selection_start': 2325,
        'zoom': 0},
                       loc('../../envs/mp4_to_gif/lib/python3.12/site-packages/moviepy/video/io/ffmpeg_reader.py'): {'attrib-starts': [('FFMPEG_VideoReader|0|',
        17),
        ('FFMPEG_VideoReader|0|.read_frame|0|',
         165)],
        'code-line': '                raise IOError(\n',
        'first-line': 155,
        'folded-linenos': [],
        'sel-line': 195,
        'sel-line-start': 6231,
        'selection_end': 6231,
        'selection_start': 6231,
        'zoom': 0},
                       loc('src/filepaths_template.py'): {'attrib-starts': [('Files|0|',
        10),
        ('Files|0|.__post_init__|0|',
         15)],
        'code-line': '        self.current_platform = platform.system()\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 16,
        'sel-line-start': 360,
        'selection_end': 409,
        'selection_start': 409,
        'zoom': 0}}
proj.pyexec = {None: ('custom',
                      '/home/kevin/envs/mp4_to_gif/bin/python3')}
testing.stored-results = (1,
                          [],
                          {})
